Approach: if element is 1, increase count and make that position and all adjacent 1 as 0. 

//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution {
  public:
    void DFS(vector<vector<char>>& board,int i,int j,int m,int n)
    { 
     
      if(i<0 || i==m || j<0 || j==n || board[i][j]!='1')
      return;

      else{
          board[i][j]='0';
      
      DFS(board,i,j+1,m,n); 
      DFS(board,i+1,j,m,n); 
      DFS(board,i-1,j,m,n); 
      DFS(board,i,j-1,m,n);
      DFS(board,i-1,j-1,m,n); 
      DFS(board,i+1,j-1,m,n); 
      DFS(board,i-1,j+1,m,n); 
      DFS(board,i+1,j+1,m,n); 
     }
      
    }
    // Function to find the number of islands.
    int numIslands(vector<vector<char>>& board) {
        int count=0;
         int m=board.size();
        int n=board[0].size();
        
        
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                if('1'==board[i][j])
                {
                  count++;
                  DFS(board,i,j,m,n);
                }
            }
        }
      return count;
    }
};

//{ Driver Code Starts.
int main() {
    int tc;
    cin >> tc;
    while (tc--) {
        int n, m;
        cin >> n >> m;
        vector<vector<char>> grid(n, vector<char>(m, '#'));
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                cin >> grid[i][j];
            }
        }
        Solution obj;
        int ans = obj.numIslands(grid);
        cout << ans << '\n';
    }
    return 0;
}
// } Driver Code Ends
