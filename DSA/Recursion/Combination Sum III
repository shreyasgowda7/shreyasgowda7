Find all valid combinations of k numbers that sum up to n such that the following conditions are true:

Only numbers 1 through 9 are used.
Each number is used at most once.
Return a list of all possible valid combinations. The list must not contain the same combination twice, and the combinations may be returned in any order.



class Solution {
public:

   void solve(int i,vector<int>& candidates,int target,vector<int>&ans,vector<vector<int>>&res,int k)
    {
       if(0==target && k==0)
       {
           res.push_back(ans);
           return;
       }

       if(target<0 || k<0)
       return;

       if(i>=candidates.size())
       return;
    
       ans.push_back(candidates[i]);  
       solve(i+1,candidates,target-candidates[i],ans,res,k-1);
       ans.pop_back();

       while(i+1<candidates.size() && candidates[i]==candidates[i+1])
       i++;

       solve(i+1,candidates,target,ans,res,k);

    }


    vector<vector<int>> combinationSum3(int k, int n) {
         vector<int>ans;
         vector<int>candidates;
        for(int i=1;i<=9;i++)
        candidates.push_back(i); 
        vector<vector<int>>res;
        sort(candidates.begin(),candidates.end());
        solve(0,candidates,n,ans,res,k);
        return res; 
    }
};
