Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sum to target.

Each number in candidates may only be used once in the combination.

Note: The solution set must not contain duplicate combinations.


class Solution {
public:

void solve(int i,vector<int>& candidates,int target,vector<int>&ans,vector<vector<int>>&res)
    {
       if(0==target)
       {
           res.push_back(ans);
           return;
       }

       if(target<0)
       return;

       if(i>=candidates.size())
       return;
    
       ans.push_back(candidates[i]);  
       solve(i+1,candidates,target-candidates[i],ans,res);
       ans.pop_back();

       while(i+1<candidates.size() && candidates[i]==candidates[i+1])
       i++;

       solve(i+1,candidates,target,ans,res);

    }

    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        
        vector<int>ans;
        vector<vector<int>>res;
        sort(candidates.begin(),candidates.end());
         int sum=0;
        solve(0,candidates,target,ans,res);
        return res; 
    }
};
