Given the root of a binary tree, the value of a target node target, and an integer k, return an array of the values of all nodes that have a distance k from the target node.

You can return the answer in any order.

 

Example 1:


Input: root = [3,5,1,6,2,0,8,null,null,7,4], target = 5, k = 2
Output: [7,4,1]
Explanation: The nodes that are a distance 2 from the target node (with value 5) have values 7, 4, and 1.
Example 2:

Input: root = [1], target = 1, k = 3
Output: []


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public: 
    vector<int>ans;
    
    void buildgraph(TreeNode* root, vector<vector<int>>&adj)
    {
        if(!root)
            return;
        
        if(root->left)
        {
            adj[root->val].push_back(root->left->val);
            adj[root->left->val].push_back(root->val);
        }
        
        if(root->right)
        {
            adj[root->val].push_back(root->right->val);
            adj[root->right->val].push_back(root->val);
        }
        
        buildgraph(root->left,adj);
        buildgraph(root->right,adj);
        
        
    }
    
    void bfs(TreeNode* root, vector<vector<int>>&adj,TreeNode* target,vector<bool>&visited, int k)
    {
      if(!root)
          return;
        
      queue<int>q;
      q.push(target->val);
        int level=0;
        while(!q.empty())
        {
            int n=q.size();     
            while(n--)
            {
              int u=q.front();
                q.pop();
              if(level == k)
                  ans.push_back(u);
              visited[u]=true;
                
                for(int j=0;j<adj[u].size();j++)
                {
                     if(!visited[adj[u][j]])
                        q.push(adj[u][j]);
                    
                }
                
            }
            
            level++;
        }

    }
    
    vector<int> distanceK(TreeNode* root, TreeNode* target, int k) {
        
        vector<vector<int>>adj(501);
        vector<bool>visited(501,false);
        buildgraph(root,adj);
        bfs(root,adj,target,visited,k);
        return ans;
        
        
        
    }
};
