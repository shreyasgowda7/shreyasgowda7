Given the root of a binary tree, return all root-to-leaf paths in any order.

A leaf is a node with no children.

 

Example 1:


Input: root = [1,2,3,null,5]
Output: ["1->2->5","1->3"]
Example 2:

Input: root = [1]
Output: ["1"]



/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<string>res;
    
    void dfs(TreeNode* root, string s)
    {
        if(root==NULL)
            return;
        
        if(root->left == NULL && root->right == NULL)
        {
            s+= to_string(root->val);
            res.push_back(s);
            return;
        }
        s+=to_string(root->val)+"->";
        dfs(root->left,s);
        dfs(root->right,s);
        
    }
    
    vector<string> binaryTreePaths(TreeNode* root) {
        
        dfs(root,"");
        return res;    
    }
};
