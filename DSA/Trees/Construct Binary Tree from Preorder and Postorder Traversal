Given two integer arrays, preorder and postorder where preorder is the preorder traversal of a binary tree of distinct values and postorder is the postorder traversal of the same tree, reconstruct and return the binary tree.

If there exist multiple answers, you can return any of them.

 

Example 1:


Input: preorder = [1,2,4,5,3,6,7], postorder = [4,5,2,6,7,3,1]
Output: [1,2,3,4,5,6,7]
Example 2:

Input: preorder = [1], postorder = [1]
Output: [1]


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    map<int,int>m;
    TreeNode * helper(vector<int>& preorder,int prestart,int preend,vector<int>& postorder,int poststart,int postend)
    {
        if(prestart>preend) return NULL;
        TreeNode *root = new TreeNode(preorder[prestart]);
        if(prestart==preend) return root;
        
        int postindex= m[preorder[prestart+1]];
        int len= postindex-poststart+1;
        
        root->left=helper(preorder,prestart+1,prestart+len,postorder,poststart,postindex);
        root->right=helper(preorder,prestart+len+1,preend,postorder,postindex+1,postend-1);
        
        return root;
        
    }
    
    TreeNode* constructFromPrePost(vector<int>& preorder, vector<int>& postorder) {
    for(int i=0;i<postorder.size();i++)m[postorder[i]]=i;
        
     return helper(preorder,0,preorder.size()-1,postorder,0,postorder.size()-1);
        
        
    }
};
