Given the root of a binary tree, return the zigzag level order traversal of its nodes' values. (i.e., from left to right, then right to left for the next level and alternate between).

 

Example 1:


Input: root = [3,9,20,null,null,15,7]
Output: [[3],[20,9],[15,7]]
Example 2:

Input: root = [1]
Output: [[1]]
Example 3:

Input: root = []
Output: []




/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:bool flag=true;
    
    vector<vector<int>> zigzagLevelOrder(TreeNode* root) {
               
      vector<vector<int>>ans;  
           list<TreeNode*>q;
            q.push_back(root);
        
        if(!root)
        return ans;
            
            while(!q.empty())
            {   
                vector<int>v;
                int size=q.size();
                for(int i=0;i<size;i++)
                {    
                  if(flag)
                {    
                    auto* u= q.front();
                    q.pop_front();
                    v.push_back(u->val);
                    if(u->left)
                    q.push_back(u->left);
                    if(u->right)
                    q.push_back(u->right);             
                }
                else if(!flag)
                {   
                    auto u= q.back();
                    q.pop_back();
                    v.push_back(u->val);
                    if(u->right)
                    q.push_front(u->right);
                    if(u->left)
                    q.push_front(u->left);
                }
                    
                    
            }
                
                ans.push_back(v);
                flag = !flag;
            }
                    
        return ans;
    }
};
