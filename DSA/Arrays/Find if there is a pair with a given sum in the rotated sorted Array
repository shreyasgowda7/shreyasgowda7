Approach: Find pivot. assign left right, calcuate sum compare < x or > x. ==x till left != right.


#include <iostream>
using namespace std;

// Function to find a pair with a given sum in a sorted and
// rotated array
bool findPair(int arr[], int n, int x)
{
	// find pivot element
	int pivot = 0;
	for (int i = 0; i < n - 1; i++) {
		if (arr[i] > arr[i + 1]) {
			pivot = i + 1;
			break;
		}
	}
	// set left and right pointers
	int left = pivot;
	int right = pivot - 1;
	// loop until left and right pointers meet
	while (left != right) {
		// if sum of elements at left and right pointers is
		// equal to x, return true
		if (arr[left] + arr[right] == x) {
			return true;
		}
		// if sum of elements at left and right pointers is
		// less than x, move left pointer to the next
		// element
		else if (arr[left] + arr[right] < x) {
			left = (left + 1) % n;
		}
		// if sum of elements at left and right pointers is
		// greater than x, move right pointer to the
		// previous element
		else {
			right = (right - 1 + n) % n;
		}
	}
	// return false if pair not found
	return false;
}

int main()
{
	// initialize array and variables
	int arr[] = { 11, 15, 6, 8, 9, 10 };
	int n = sizeof(arr) / sizeof(arr[0]);
	int x = 16;
	// call function and print result
	cout << boolalpha << findPair(arr, n, x);
	return 0;
}
